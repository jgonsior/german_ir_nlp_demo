import os
import json
import inspect

# Function for mapping two values in json object
def map_json(file_name: str, key: str, value: str):
    with open(file_name, "r") as f:
        map = {}
        for obj in f:
            obj = json.loads(obj)
            key_obj = obj[key]
            value_obj = obj[value]
            map[key_obj] = value_obj
        return map


# Function for formatting the training data generated by GPL Toolkit into training data for ColBERT
# Format: List of json objects with {"query": query, "pos": [pos_pas], "neg": [neg_pas]}
def format_to_training_data(dir: str):

    abs_path_caller = os.path.dirname(inspect.stack()[1][1])
    work_dir = f"{abs_path_caller}/{dir}"

    write_data = []
    with open(f"{work_dir}/hard-negatives.jsonl", 'r') as file:

        query_map = map_json(f"{work_dir}/qgen-queries.jsonl", "_id", "text")
        corpus_map = map_json(f"{work_dir}/corpus.jsonl", "_id", "text")

        for json_object in file:
            write_object = {}
            data = json.loads(json_object)

            qid = data["qid"]
            write_object["query"] = query_map[qid]
            
            pos_id = data["pos"][0]
            write_object["pos"] = corpus_map[pos_id]

            neg_id = data["neg"]["msmarco-distilbert-base-v3"]
            neg_list = [corpus_map[id] for id in neg_id]
                                      
            write_object["neg"] = neg_list
            write_data.append(write_object)

    with open(f"{work_dir}/training-data.json", "w", encoding="utf-8") as file:
        json.dump(write_data, file, indent = 1, ensure_ascii=False)
                
